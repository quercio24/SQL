--DRILLS 2 
SELECT *
FROM ksprojects; 
-- 1) Write a query that returns a list of all the unique values in the 'country' field.
SELECT DISTINCT(country)
FROM ksprojects; 
-- 2) How many unique values are there for the main_category field? Ans: 15,158
-- What about for the category field?
SELECT COUNT(DISTINCT(main_category)), COUNT(DISTINCT(category))
FROM ksprojects; 
-- 3) Get a list of all the unique combinations of main_category and category fields,
-- sorted A to Z by main_category.
SELECT DISTINCT(main_category), category
FROM ksprojects
ORDER BY main_category; 
--- SAME THING BELOW 
SELECT main_category, category
FROM ksprojects
GROUP BY main_category, category
ORDER BY main_category ;
-- 4) How many unique categories are in each main_category?
SELECT COUNT(main_category), main_category
FROM ksprojects
GROUP BY main_category; 
-- 5) Write a query that returns the average number of backers per main_category, 
-- rounded to the nearest whole number and sorted from high to low.
SELECT ROUND(AVG(backers),0) as avg_back, main_category
FROM ksprojects
GROUP BY main_category
ORDER BY avg_back DESC; 
-- 6) Write a query that shows, for each category, 
-- how many campaigns were successful and the average difference per 
-- project between dollars pledged and the goal.
-- revisit query!!
SELECT category, AVG(usd_pledged-goal) as avg_diff, COUNT(state) 
FROM ksprojects
WHERE state = 'successful'
GROUP BY category; 
-- 7) Write a query that shows, for each main category, how many projects had zero backers for
-- that category and the largest goal amount for that category 
-- (also for projects with zero backers).
-- for the count statement can either say, count(*) or parenthesize whatever is being used
-- in the where clause (it's the same thing!!)
SELECT main_category, max(goal), COUNT(backers)
FROM ksprojects 
WHERE backers = 0 
GROUP BY main_category; 
-- 8) For each category, find the average USD per backer, and return only 
-- those results for which the average USD per backer is < $50, sorted high to low.
-- revisit query!!
SELECT category, avg(usd_pledged/NULLIF(backers,0)) as avg_per_backer
FROM ksprojects
GROUP BY category
HAVING avg(usd_pledged/NULLIF(backers,0)) < 50
ORDER BY avg_per_backer DESC; 
-- 9) Write a query that shows, for each main_category,
-- how many successful projects had between 5 and 10 backers.
SELECT main_category, COUNT(*) as num_of_records 
FROM ksprojects 
WHERE backers BETWEEN 5 and 10 and state = 'successful'
GROUP BY main_category;
-- 10) Get a total of the amount ‘pledged’ for each type of currency grouped by
-- its respective currency. Sort by ‘pledged’ from high to low.
-- Had to look up using the sum function 
SELECT currency, sum(pledged)
FROM ksprojects
GROUP By currency
ORDER BY sum(pledged) DESC; 
-- 11) Excluding Games and Technology records in 
-- the main_category field, return the total of all backers for 
-- successful projects by main_category where the total was more than 100,000. 
-- Sort by main_category from A to Z.
-- don't need to include the state = 'successful' statement...I don't know why 
SELECT main_category, sum(backers) as sum_back
FROM ksprojects 
WHERE state = 'successful' and main_category NOT IN('Games and Technology')
GROUP BY main_category
HAVING sum(backers) > 100000
ORDER BY main_category; 






